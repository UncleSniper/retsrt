provide retsina.core.Monad
__intrin

pub mod retsina::core {

	pub type Monad <= MonadicP: forall EncapsulatedT: TypeBound:
			TypeBoundP EncapsulatedT -> TypeBoundP (MonadicP EncapsulatedT)
			< Applicative {
		pub mapj: forall OldT: TypeBound, NewT: TypeBound:
			(OldT -> MonadicP NewT) -> MonadicP OldT -> MonadicP NewT
	}

	pub mod monad {

		pub fun(MonadicP: Monad, OldT: TypeBound, NewT: TypeBound) mapj
			transform: OldT -> MonadicP NewT,
			monadic: MonadicP OldT
			=> MonadicP NewT
			= MonadicP.mapj transform monadic

		pub fun(MonadicP: Monad, LeftT: TypeBound, RightT: TypeBound) seqr
			left: MonadicP LeftT,
			right: MonadicP RightT
			=> MonadicP RightT
			= MonadicP.mapj (\_ = right) left

		pub fun(MonadicP: Monad, LeftT: TypeBound, RightT: TypeBound) seql
			left: MonadicP LeftT,
			right: MonadicP RightT
			=> MonadicP LeftT
			= MonadicP.mapj (\result = MonadicP.map (\_ = result) right) left

		pub oper(MonadicP: Monad, OldT: TypeBound, NewT: TypeBound) infixMapj => MonadicP NewT:
			{monadic: MonadicP OldT} `>>=` {transform: OldT -> MonadicP NewT}
			= MonadicP.mapj transform monadic

		pub oper(MonadicP: Monad, LeftT: TypeBound, RightT: TypeBound) infixSeqr => MonadicP RightT:
			{left: MonadicP LeftT} `>>` {right: MonadicP RightT}
			= seqr left right

		pub oper(MonadicP: Monad, LeftT: TypeBound, RightT: TypeBound) infixSeql => MonadicP LeftT:
			{left: MonadicP LeftT} `<<` {right: MonadicP RightT}
			= seql left right

	}

}
